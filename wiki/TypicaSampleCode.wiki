#labels Featured
Here is some simple code that demonstrates using typica for SQS and EC2.

= Introduction =

This code can be found in Subverion, but it is sometimes helpful to document code sample in something approximating a users manual.

= SQS =
Usage of SQS is simple. First, you create or get an existing queue. For that, you have the QueueService object. When using a specific queue, the MessageQueue object provides methods for queue interaction.

=== Enqueue Sample ===
{{{
import org.apache.log4j.Logger;

import ch.inventec.Base64Coder;

import com.xerox.amazonws.sqs.MessageQueue;
import com.xerox.amazonws.sqs.Message;
import com.xerox.amazonws.sqs.SQSUtils;
import com.xerox.amazonws.tools.LoggingConfigurator;

/**
 * This sample application creates a queue with the specified name (if the queue doesn't
 * already exist), and then sends (enqueues) a message to the queue.
 */
public class EnqueueSample {
	private static Logger log = LoggingConfigurator.configureLogging(EnqueueSample.class);

	public static void main( String[] args ) {
		final String AWSAccessKeyId = "[AWS Access Id]";
		final String SecretAccessKey = "[AWS Secret Key]";

		try {
			if (args.length < 2) {
				log.error("usage: EnqueueSample <queueId> <message>");
			}
			String queueName = args[0];
			String message = args[1];

			// Create the message queue object
			MessageQueue msgQueue = SQSUtils.connectToQueue(queueName, AWSAccessKeyId, SecretAccessKey);
			log.info(" url returned = "+msgQueue.getUrl());

			String msgId = msgQueue.sendMessage( Base64Coder.encodeString(message) );
			log.info( "Sent message with id " + msgId );
		} catch ( Exception ex ) {
			log.error( "EXCEPTION", ex );
		}
	}
}
}}}

=== Dequeue Sample ===
{{{
import org.apache.log4j.Logger;

import ch.inventec.Base64Coder;

import com.xerox.amazonws.sqs.MessageQueue;
import com.xerox.amazonws.sqs.Message;
import com.xerox.amazonws.sqs.SQSUtils;
import com.xerox.amazonws.tools.LoggingConfigurator;

/**
 * This sample application retrieves (dequeues) a message from the queue specified by
 * the value of the queuename parameter. If successful, it deletes the message from the queue.
 * On error, it retries a number of times.
 */
public class DequeueSample {
	private static Logger log = LoggingConfigurator.configureLogging(DequeueSample.class);

	public static void main( String[] args ) {
		final String AWSAccessKeyId = "[AWS Access Id]";
		final String SecretAccessKey = "[AWS Secret Key]";

		int count = 0;
		try {
			if (args.length < 1) {
				log.error("usage: DequeueSample <queueId>");
			}
			String queueName = args[0];

			// Retrieve the message queue object (by name).
			MessageQueue msgQueue = SQSUtils.connectToQueue(queueName, AWSAccessKeyId, SecretAccessKey);

			// Try to retrieve (dequeue) the message, and then delete it.
			Message msg = null;
			while ((msg = msgQueue.receiveMessage()) != null) {
				String text = msg.getMessageBody();
				try {
					text = Base64Coder.decodeString(text);
				} catch (IllegalArgumentException ex) {
					log.warn("Message wasn't base64 encoded.");
				}
				log.debug("msg : "+text);
				msgQueue.deleteMessage( msg.getMessageId() );
				log.info( "Deleted message id " + msg.getMessageId());
				count++;
			}
		} catch ( Exception ex ) {
			log.error( "EXCEPTION", ex );
		}
		log.debug("Deleted "+count+" messages");
	}
}
}}}

= EC2 =
The Jec2 class provides methods to perform all of the functions you can perform using the EC2 QUERY API.