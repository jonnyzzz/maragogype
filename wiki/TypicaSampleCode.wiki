#labels Featured
Here is some simple code that demonstrates using typica for SQS and EC2.

= Introduction =

This code can be found in Subverion, but it is sometimes helpful to document code sample in something approximating a users manual.

= SQS =
Usage of SQS is simple. First, you create or get an existing queue. For that, you have the QueueService object. When using a specific queue, the MessageQueue object provides methods for queue interaction.

=== Enqueue Sample ===
[http://typica.googlecode.com/svn/trunk/test/java/EnqueueSample.java]
{{{
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.xerox.amazonws.sqs2.MessageQueue;
import com.xerox.amazonws.sqs2.Message;
import com.xerox.amazonws.sqs2.SQSUtils;

/**
 * This sample application creates a queue with the specified name (if the queue doesn't
 * already exist), and then sends (enqueues) a message to the queue.
 */
public class EnqueueSample {
	private static Log log = LogFactory.getLog(EnqueueSample.class);

	public static void main( String[] args ) {
		final String AWSAccessKeyId = "[AWS Access Id]";
		final String SecretAccessKey = "[AWS Secret Key]";

		try {
			if (args.length < 2) {
				log.error("usage: EnqueueSample <queueId> <message>");
			}
			String queueName = args[0];
			String message = args[1];

			// Create the message queue object
			MessageQueue msgQueue = SQSUtils.connectToQueue(queueName, AWSAccessKeyId, SecretAccessKey);
			log.info(" url returned = "+msgQueue.getUrl());

			String msgId = msgQueue.sendMessage( Base64Coder.encodeString(message) );
			log.info( "Sent message with id " + msgId );
		} catch ( Exception ex ) {
			log.error( "EXCEPTION", ex );
		}
	}
}
}}}

=== Dequeue Sample ===
[http://typica.googlecode.com/svn/trunk/test/java/DequeueSample.java]
{{{
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.xerox.amazonws.sqs2.MessageQueue;
import com.xerox.amazonws.sqs2.Message;
import com.xerox.amazonws.sqs2.SQSUtils;

/**
 * This sample application retrieves (dequeues) a message from the queue specified by
 * the value of the queuename parameter. If successful, it deletes the message from the queue.
 * On error, it retries a number of times.
 */
public class DequeueSample {
	private static Log log = LogFactory.getLog(DequeueSample.class);

	public static void main( String[] args ) {
		final String AWSAccessKeyId = "[AWS Access Id]";
		final String SecretAccessKey = "[AWS Secret Key]";

		int count = 0;
		try {
			if (args.length < 1) {
				log.error("usage: DequeueSample <queueId>");
			}
			String queueName = args[0];

			// Retrieve the message queue object (by name).
			MessageQueue msgQueue = SQSUtils.connectToQueue(queueName, AWSAccessKeyId, SecretAccessKey);

			// Try to retrieve (dequeue) the message, and then delete it.
			Message msg = null;
			while ((msg = msgQueue.receiveMessage()) != null) {
				String text = msg.getMessageBody();

				log.debug("msg : "+text);
				msgQueue.deleteMessage( msg.getMessageId() );
				log.info( "Deleted message id " + msg.getMessageId());
				count++;
			}
		} catch ( Exception ex ) {
			log.error( "EXCEPTION", ex );
		}
		log.debug("Deleted "+count+" messages");
	}
}
}}}

= EC2 =
The Jec2 class provides methods to perform all of the functions you can perform using the EC2 QUERY API.

[http://typica.googlecode.com/svn/trunk/test/java/Ec2Sample.java]
{{{
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.xerox.amazonws.ec2.ConsoleOutput;
import com.xerox.amazonws.ec2.GroupDescription;
import com.xerox.amazonws.ec2.Jec2;
import com.xerox.amazonws.ec2.ImageDescription;
import com.xerox.amazonws.ec2.ImageListAttributeItem;
import com.xerox.amazonws.ec2.ImageListAttribute.ImageListAttributeItemType;
import com.xerox.amazonws.ec2.KeyPairInfo;
import com.xerox.amazonws.ec2.ReservationDescription;
import com.xerox.amazonws.ec2.ReservationDescription.Instance;

public class Ec2Sample {
        private static Log log = LogFactory.getLog(EC2Sample.class);

	public static void main(String [] args) throws Exception {
		final String AWSAccessKeyId = "[AWS Access Id]";
		final String SecretAccessKey = "[AWS Secret Key]";

		Jec2 ec2 = new Jec2(AWSAccessKeyId, SecretAccessKey);
	
		// describe images
		List<String> params = new ArrayList<String>();
		List<ImageDescription> images = ec2.describeImages(params);
		log.info("Available Images");
		for (ImageDescription img : images) {
			if (img.getImageState().equals("available")) {
				log.info(img.getImageId()+"\t"+img.getImageLocation()+"\t"+img.getImageOwnerId());
			}
		}

		// describe instances
		params = new ArrayList<String>();
		List<ReservationDescription> instances = ec2.describeInstances(params);
		log.info("Instances");
		String instanceId = "";
		for (ReservationDescription res : instances) {
			log.info(res.getOwner()+"\t"+res.getReservationId());
			if (res.getInstances() != null) {
				for (Instance inst : res.getInstances()) {
					log.info("\t"+inst.getImageId()+"\t"+inst.getDnsName()+"\t"+inst.getState()+"\t"+inst.getKeyName());
					instanceId = inst.getInstanceId();
				}
			}
		}

		// test console output
		ConsoleOutput consOutput = ec2.getConsoleOutput(instanceId);
		log.info("Console Output:");
		log.info(consOutput.getOutput());

		// show keypairs
		List<KeyPairInfo> info = ec2.describeKeyPairs(new String [] {});
		log.info("keypair list");
		for (KeyPairInfo i : info) {
			log.info("keypair : "+i.getKeyName()+", "+i.getKeyFingerprint());
		}
	}
}
}}}